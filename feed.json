{
    "version": "https://jsonfeed.org/version/1.1",
    "title": "Gavin Wiggins",
    "home_page_url": "https://gavinw.me",
    "feed_url": "https://gavinw.me/feed.json",
    "items": [
        {
            "id": "https://gavinw.me/posts/python/fastapi-router.html",
            "url": "https://gavinw.me/posts/python/fastapi-router.html",
            "title": "FastAPI Router for Path Operations",
            "date_published": "2025-08-09T00:00:00Z",
            "content_html": "<p>The <code>APIRouter</code> class in FastAPI is used to group path operations for an app. This allows paths to be defined in multiple files which is useful for large applications. The example below defines fruits and veggies paths for the router.</p><p><a href=\"https://gavinw.me/posts/python/fastapi-router.html\">Continue reading...</a></p>"
        },
        {
            "id": "https://gavinw.me/posts/python/dynamic-config.html",
            "url": "https://gavinw.me/posts/python/dynamic-config.html",
            "title": "Dynamic Python Class from TOML",
            "date_published": "2025-04-21T00:00:00Z",
            "content_html": "<p>Python's standard library provides functionality to read a TOML configuration file and dynamically create class instances based on the parameters defined in that file. This is useful for command line tools and web applications.</p><p><a href=\"https://gavinw.me/posts/python/dynamic-config.html\">Continue reading...</a></p>"
        },
        {
            "id": "https://gavinw.me/posts/python/pyzmq-test-client-server.html",
            "url": "https://gavinw.me/posts/python/pyzmq-test-client-server.html",
            "title": "Testing a PyZMQ Client and Server",
            "date_published": "2025-04-12T00:00:00Z",
            "content_html": "<p>The ZeroMQ context and socket for PyZMQ code can be patched and mocked using pytest and pytest-mock. This allows the code to be tested without having to run the server and connect the client. For the example discussed below, the client sends a request to the server, the request message is used by the server to execute a command, and the result of this command is sent back to the client. Finally, tests are demonstrated for the client and server codes.</p><p><a href=\"https://gavinw.me/posts/python/pyzmq-test-client-server.html\">Continue reading...</a></p>"
        },
        {
            "id": "https://gavinw.me/posts/python/pyzmq-request-reply.html",
            "url": "https://gavinw.me/posts/python/pyzmq-request-reply.html",
            "title": "Request-Reply Pattern with PyZMQ",
            "date_published": "2025-04-10T00:00:00Z",
            "content_html": "<p>This demonstrates a simple request-reply pattern using the <a href=\"https://pyzmq.readthedocs.io/en/latest/\">PyZMQ</a> package for Python. In the example, the client sends a message to the server which replies back to the client.</p><p><a href=\"https://gavinw.me/posts/python/pyzmq-request-reply.html\">Continue reading...</a></p>"
        },
        {
            "id": "https://gavinw.me/posts/python/dynamic-import.html",
            "url": "https://gavinw.me/posts/python/dynamic-import.html",
            "title": "Dynamic Package Import in Python",
            "date_published": "2025-04-09T00:00:00Z",
            "content_html": "<p>Use the <code>importlib</code> package to dynamically import a Python module by its name. Similarly, use the <code>getattr</code> function to get a class or function by name. This is useful in plugin architectures or when loading things based on configuration files.</p><p><a href=\"https://gavinw.me/posts/python/dynamic-import.html\">Continue reading...</a></p>"
        },
        {
            "id": "https://gavinw.me/posts/python/log-file.html",
            "url": "https://gavinw.me/posts/python/log-file.html",
            "title": "Delay Log File Creation",
            "date_published": "2025-03-27T00:00:00Z",
            "content_html": "<p>Use the delay argument for Python's log file handler to avoid creating unnecessary log files. This ensures that a log file is created only for the desired log levels.</p><p><a href=\"https://gavinw.me/posts/python/log-file.html\">Continue reading...</a></p>"
        },
        {
            "id": "https://gavinw.me/posts/python/flask-config.html",
            "url": "https://gavinw.me/posts/python/flask-config.html",
            "title": "Flask App Configuration with Dotenv",
            "date_published": "2025-03-12T00:00:00Z",
            "content_html": "<p>The <a href=\"https://pypi.org/project/python-dotenv/\">dotenv</a> package can be used to load configuration settings for a Flask app. The configuration is defined in a <code>.env</code> file which is ignored by version control to ensure items like API keys and passwords are not shared with others.</p><p><a href=\"https://gavinw.me/posts/python/flask-config.html\">Continue reading...</a></p>"
        },
        {
            "id": "https://gavinw.me/posts/python/uv-projects.html",
            "url": "https://gavinw.me/posts/python/uv-projects.html",
            "title": "Python Projects with uv",
            "date_published": "2025-01-07T00:00:00Z",
            "content_html": "<p>Managing a virtual environment and its dependencies can be a hassle for Python projects. Choosing between the different techniques to install Python and different package managers can be a daunting task. Luckily, uv makes this process much easier.</p><p><a href=\"https://gavinw.me/posts/python/uv-projects.html\">Continue reading...</a></p>"
        },
        {
            "id": "https://gavinw.me/posts/python/uv-scripts.html",
            "url": "https://gavinw.me/posts/python/uv-scripts.html",
            "title": "Run Python Scripts with uv",
            "date_published": "2025-01-06T00:00:00Z",
            "content_html": "<p>A Python script is a file intended for standalone execution. The uv tool can be used to directly run a script even if other Python packages are needed to run it. This offers a more streamlined approach for running scripts compared to manually managing a virtual environment and its dependencies.</p><p><a href=\"https://gavinw.me/posts/python/uv-scripts.html\">Continue reading...</a></p>"
        },
        {
            "id": "https://gavinw.me/posts/python/package-data.html",
            "url": "https://gavinw.me/posts/python/package-data.html",
            "title": "Python Package with Data",
            "date_published": "2024-11-24T00:00:00Z",
            "content_html": "<p>The file structure below represents a project for a Python package named <code>mypackage</code> that includes data files. The data files in this example are CSV text files located in the package's source directory at <code>src/mypackage/data/</code>. The package can be installed using <code>pip install .</code> from the root level of the project.</p><p><a href=\"https://gavinw.me/posts/python/package-data.html\">Continue reading...</a></p>"
        },
        {
            "id": "https://gavinw.me/posts/python/config-dataclass.html",
            "url": "https://gavinw.me/posts/python/config-dataclass.html",
            "title": "Configuration Using a Python dataclass",
            "date_published": "2024-11-21T00:00:00Z",
            "content_html": "<p>A data class in Python can be used to store configuration settings for an application or service. Default configuration values are assigned to fields on the data class. However, the user can overload those values by using a class method to load the configuration settings from a file.</p><p><a href=\"https://gavinw.me/posts/python/config-dataclass.html\">Continue reading...</a></p>"
        },
        {
            "id": "https://gavinw.me/posts/python/argparse.html",
            "url": "https://gavinw.me/posts/python/argparse.html",
            "title": "Command-line Arguments with Python",
            "date_published": "2024-09-28T00:00:00Z",
            "content_html": "<p>The <code>argparse</code> module provides an interface to write command-line programs in Python. It is part of the Python standard library so there's no need for external dependencies. A basic example is given below that demonstrates positional and optional arguments. The second example shows the use of subparsers to create subcommands.</p><p><a href=\"https://gavinw.me/posts/python/argparse.html\">Continue reading...</a></p>"
        },
        {
            "id": "https://gavinw.me/posts/python/protocol.html",
            "url": "https://gavinw.me/posts/python/protocol.html",
            "title": "Protocols in Python",
            "date_published": "2024-07-13T00:00:00Z",
            "content_html": "<p>A protocol is a way to define structural typing or \"duck typing\" in Python. It defines a set of attributes and/or methods that an object must have in order to be considered compatible with that protocol. Below is a protocol defined as an <code>Activity</code> class which must have <code>name</code> and <code>duration</code> attributes along with a <code>get_message</code> method.</p><p><a href=\"https://gavinw.me/posts/python/protocol.html\">Continue reading...</a></p>"
        },
        {
            "id": "https://gavinw.me/posts/python/makefiles.html",
            "url": "https://gavinw.me/posts/python/makefiles.html",
            "title": "Makefiles for Python Projects",
            "date_published": "2024-03-14T00:00:00Z",
            "content_html": "<p>Makefiles are typically used for C and C++ projects to build source code but they can be useful for Python projects too. A Makefile is just a text file used by the GNU Make tool to run commands. For a Python project, these commands can run unit tests, format your code, or publish a package to PyPI.</p><p><a href=\"https://gavinw.me/posts/python/makefiles.html\">Continue reading...</a></p>"
        },
        {
            "id": "https://gavinw.me/posts/python/textwrap-dedent.html",
            "url": "https://gavinw.me/posts/python/textwrap-dedent.html",
            "title": "Dedent Text with Python",
            "date_published": "2024-02-29T00:00:00Z",
            "content_html": "<p>Remove leading whitespace from every line in a string with the <code>textwrap.dedent()</code> function. The first example shown below prints a multiline string that is defined in a function. The second example prints the same string but removes the leading whitespace.</p><p><a href=\"https://gavinw.me/posts/python/textwrap-dedent.html\">Continue reading...</a></p>"
        },
        {
            "id": "https://gavinw.me/posts/python/virtual-env.html",
            "url": "https://gavinw.me/posts/python/virtual-env.html",
            "title": "Virtual Environments",
            "date_published": "2024-02-16T00:00:00Z",
            "content_html": "<p>The <code>venv</code> module included with Python is used to create and manage virtual environments. This page provides some useful commands for creating and working with virtual environments. A virtual environment should not be checked into source control via Git or other such systems.</p><p><a href=\"https://gavinw.me/posts/python/virtual-env.html\">Continue reading...</a></p>"
        },
        {
            "id": "https://gavinw.me/posts/python/cached-class-property.html",
            "url": "https://gavinw.me/posts/python/cached-class-property.html",
            "title": "Cached Class Property in Python",
            "date_published": "2024-01-13T00:00:00Z",
            "content_html": "<p>The <a href=\"https://docs.python.org/3/library/functools.html\">functools</a> module provides a <code>@cached_property</code> decorator to store the value of a class property.</p><p><a href=\"https://gavinw.me/posts/python/cached-class-property.html\">Continue reading...</a></p>"
        },
        {
            "id": "https://gavinw.me/posts/python/cache-function.html",
            "url": "https://gavinw.me/posts/python/cache-function.html",
            "title": "Cache Function in Python",
            "date_published": "2024-01-13T00:00:00Z",
            "content_html": "<p>The <a href=\"https://docs.python.org/3/library/functools.html\">functools</a> module provides a <code>@cache</code> decorator to store the results of an expensive function; also known as memoize.</p><p><a href=\"https://gavinw.me/posts/python/cache-function.html\">Continue reading...</a></p>"
        },
        {
            "id": "https://gavinw.me/posts/python/version.html",
            "url": "https://gavinw.me/posts/python/version.html",
            "title": "Version Number in Python",
            "date_published": "2023-11-30T00:00:00Z",
            "content_html": "<p>Use the <a href=\"https://docs.python.org/3/library/importlib.metadata.html\">importlib.metadata</a> library in Python to get the version number of a package. The example below gets the version of the ipython package that has been installed in the environment.</p><p><a href=\"https://gavinw.me/posts/python/version.html\">Continue reading...</a></p>"
        },
        {
            "id": "https://gavinw.me/posts/python/doctest.html",
            "url": "https://gavinw.me/posts/python/doctest.html",
            "title": "Doctest with Python",
            "date_published": "2023-11-17T00:00:00Z",
            "content_html": "<p>The docstring of the <code>adder()</code> function shown below contains two examples of how to use the function. The function resides in a file named <code>example.py</code>. Use the <code>doctest</code> module to test the examples in this docstring.</p><p><a href=\"https://gavinw.me/posts/python/doctest.html\">Continue reading...</a></p>"
        },
        {
            "id": "https://gavinw.me/posts/python/numpy-gauss.html",
            "url": "https://gavinw.me/posts/python/numpy-gauss.html",
            "title": "Gauss-Legendre Points and Weights with NumPy",
            "date_published": "2023-08-31T00:00:00Z",
            "content_html": "<p>The function below returns the Gauss-Legendre integration points and weights for a 2D quadrilateral using values from a 1D quadrature. The 1D values are obtained from NumPy's <code>leggauss()</code> function.</p><p><a href=\"https://gavinw.me/posts/python/numpy-gauss.html\">Continue reading...</a></p>"
        },
        {
            "id": "https://gavinw.me/posts/cpp/array2d.html",
            "url": "https://gavinw.me/posts/cpp/array2d.html",
            "title": "Two-Dimensional Array in C++",
            "date_published": "2023-08-13T00:00:00Z",
            "content_html": "<p>A two-dimensional array can be created using the traditional C-style array or with the C++ standard array container. Both approaches are demonstrated below.</p><p><a href=\"https://gavinw.me/posts/cpp/array2d.html\">Continue reading...</a></p>"
        },
        {
            "id": "https://gavinw.me/posts/cpp/include-function.html",
            "url": "https://gavinw.me/posts/cpp/include-function.html",
            "title": "Include a Function from a C++ File",
            "date_published": "2023-07-25T00:00:00Z",
            "content_html": "<p>This example uses a function defined in another file. The <code>main.cpp</code> example uses the <code>Log()</code> function to print a string to the screen. This function is implemented in <code>logger.cpp</code> and <code>logger.h</code>.</p><p><a href=\"https://gavinw.me/posts/cpp/include-function.html\">Continue reading...</a></p>"
        },
        {
            "id": "https://gavinw.me/posts/python/debugger.html",
            "url": "https://gavinw.me/posts/python/debugger.html",
            "title": "Debugger in Python",
            "date_published": "2023-07-18T00:00:00Z",
            "content_html": "<p>The <a href=\"https://docs.python.org/3/library/pdb.html\">pdb</a> module provides an interactive debugger for Python programs. It supports breakpoints and stepping through the source code. To demonstrate using the debugger and setting a breakpoint, first consider the example shown below.</p><p><a href=\"https://gavinw.me/posts/python/debugger.html\">Continue reading...</a></p>"
        },
        {
            "id": "https://gavinw.me/posts/python/conda-env.html",
            "url": "https://gavinw.me/posts/python/conda-env.html",
            "title": "Conda Environments",
            "date_published": "2023-06-15T00:00:00Z",
            "content_html": "<p>Similar to Python's <code>venv</code> module, Conda can also create virtual environments but these environments support languages other than Python.</p><p><a href=\"https://gavinw.me/posts/python/conda-env.html\">Continue reading...</a></p>"
        },
        {
            "id": "https://gavinw.me/posts/python/package-name.html",
            "url": "https://gavinw.me/posts/python/package-name.html",
            "title": "Python Package Name",
            "date_published": "2023-06-11T00:00:00Z",
            "content_html": "<p>The distribution name of a Python package can be different than the import name. Below is an example of a repository named <code>sklearn-model</code> which contains the <code>skmodel</code> package.</p><p><a href=\"https://gavinw.me/posts/python/package-name.html\">Continue reading...</a></p>"
        },
        {
            "id": "https://gavinw.me/posts/python/matplotlib-imshow-plot.html",
            "url": "https://gavinw.me/posts/python/matplotlib-imshow-plot.html",
            "title": "Imshow Plot with Matplotlib",
            "date_published": "2023-05-10T00:00:00Z",
            "content_html": "<p>Display data as an image using Matplotlib's imshow method.</p><p><a href=\"https://gavinw.me/posts/python/matplotlib-imshow-plot.html\">Continue reading...</a></p>"
        },
        {
            "id": "https://gavinw.me/posts/python/matplotlib-matshow-plot.html",
            "url": "https://gavinw.me/posts/python/matplotlib-matshow-plot.html",
            "title": "Matshow Plot with Matplotlib",
            "date_published": "2023-05-10T00:00:00Z",
            "content_html": "<p>Visualize an array using Matplotlib's matshow function. The first example shown below plots a 2D array and the second example plots a diagonal array.</p><p><a href=\"https://gavinw.me/posts/python/matplotlib-matshow-plot.html\">Continue reading...</a></p>"
        },
        {
            "id": "https://gavinw.me/posts/javascript/node.html",
            "url": "https://gavinw.me/posts/javascript/node.html",
            "title": "Create a JavaScript Environment with Node",
            "date_published": "2023-04-28T00:00:00Z",
            "content_html": "<p>Node.js is a JavaScript run-time environment for developing command line tools and server-side applications outside the browser. See <a href=\"https://nodejs.dev\">https://nodejs.dev</a> or <a href=\"https://nodejs.org\">https://nodejs.org</a> for more information. The recommended way to install Node.js is with the Node Version Manager (nvm). See the installation steps at <a href=\"https://github.com/nvm-sh/nvm\">https://github.com/nvm-sh/nvm</a>.</p><p><a href=\"https://gavinw.me/posts/javascript/node.html\">Continue reading...</a></p>"
        },
        {
            "id": "https://gavinw.me/posts/python/count-letters.html",
            "url": "https://gavinw.me/posts/python/count-letters.html",
            "title": "Count Letters with Python",
            "date_published": "2023-04-15T00:00:00Z",
            "content_html": "<p>Given the string <code>Mary had a little Mommy lamb</code>, count the number of times a letter appears in the string. See the examples below for different approaches.</p><p><a href=\"https://gavinw.me/posts/python/count-letters.html\">Continue reading...</a></p>"
        },
        {
            "id": "https://gavinw.me/posts/javascript/load-html.html",
            "url": "https://gavinw.me/posts/javascript/load-html.html",
            "title": "Use JavaScript to Load HTML Content",
            "date_published": "2023-03-26T00:00:00Z",
            "content_html": "<p>Content from HTML files can be loaded asynchronously using the <code>fetch()</code> method. In the example below, the content of the left and right columns are loaded from HTML files. The column layout is from the <a href=\"https://getbootstrap.com\">Bootstrap</a> CSS.</p><p><a href=\"https://gavinw.me/posts/javascript/load-html.html\">Continue reading...</a></p>"
        },
        {
            "id": "https://gavinw.me/posts/javascript/scroll-columns.html",
            "url": "https://gavinw.me/posts/javascript/scroll-columns.html",
            "title": "Scroll Columns with JavaScript",
            "date_published": "2023-03-24T00:00:00Z",
            "content_html": "<p>Set the max height and overflow styles of <a href=\"https://getbootstrap.com\">Bootstrap</a> columns to independently scroll the columns. This isn't JavaScript, but it's related to website layout so it might be useful for designing web applications.</p><p><a href=\"https://gavinw.me/posts/javascript/scroll-columns.html\">Continue reading...</a></p>"
        },
        {
            "id": "https://gavinw.me/posts/javascript/select-results.html",
            "url": "https://gavinw.me/posts/javascript/select-results.html",
            "title": "Select Results with JavaScript",
            "date_published": "2023-03-23T00:00:00Z",
            "content_html": "<p>In this example, number inputs are used as width and height parameters. These parameters are used to calculate area and perimeter results. The result views are in separate HTML files that are fetched with JavaScript.</p><p><a href=\"https://gavinw.me/posts/javascript/select-results.html\">Continue reading...</a></p>"
        },
        {
            "id": "https://gavinw.me/posts/javascript/strings.html",
            "url": "https://gavinw.me/posts/javascript/strings.html",
            "title": "Strings in JavaScript",
            "date_published": "2023-03-19T00:00:00Z",
            "content_html": "<p>A string in JavaScript is represented by single or double quotes.</p><p><a href=\"https://gavinw.me/posts/javascript/strings.html\">Continue reading...</a></p>"
        },
        {
            "id": "https://gavinw.me/posts/javascript/plotly-graph.html",
            "url": "https://gavinw.me/posts/javascript/plotly-graph.html",
            "title": "Plotly Graphs in JavaScript",
            "date_published": "2023-03-19T00:00:00Z",
            "content_html": "<p><a href=\"https://plotly.com\">Plotly</a> is an open-source graphing library for JavaScript and other programming languages. Two basic examples are given below. The first graph uses a custom background color to match the web page. The second graph turns off some of the grid lines and uses the default background color.</p><p><a href=\"https://gavinw.me/posts/javascript/plotly-graph.html\">Continue reading...</a></p>"
        },
        {
            "id": "https://gavinw.me/posts/javascript/input-number.html",
            "url": "https://gavinw.me/posts/javascript/input-number.html",
            "title": "Input Numbers with JavaScript",
            "date_published": "2023-03-18T00:00:00Z",
            "content_html": "<p>The example below demonstrates how to calculate the area from width and length inputs. Notice the type of each input is defined as number. Click the button to calculate the area or use an event listener to automatically run the area function.</p><p><a href=\"https://gavinw.me/posts/javascript/input-number.html\">Continue reading...</a></p>"
        },
        {
            "id": "https://gavinw.me/posts/javascript/fizzbuzz.html",
            "url": "https://gavinw.me/posts/javascript/fizzbuzz.html",
            "title": "Fizz buzz in Javascript",
            "date_published": "2023-03-18T00:00:00Z",
            "content_html": "<p>This is a typical fizz buzz example written in JavaScript that runs in a web page. The input defines the number of iterations. A number divisible by 3 displays the word \"Fizz\", a number divisible by 5 displays \"Buzz\", and a number divisible by both 3 and 5 displays \"Fizz Buzz\".</p><p><a href=\"https://gavinw.me/posts/javascript/fizzbuzz.html\">Continue reading...</a></p>"
        },
        {
            "id": "https://gavinw.me/posts/javascript/select-units.html",
            "url": "https://gavinw.me/posts/javascript/select-units.html",
            "title": "Select Units with JavaScript",
            "date_published": "2023-03-17T00:00:00Z",
            "content_html": "<p>In this example, the select element is used to change the units associated with the input parameter. As shown in the image below, the diameter is entered as 4.5 inches and is automatically converted to meters as shown in the Results section. The same conversion to meters is done for the height parameter. Finally, the parameters (in units of meters) are used to calculate the cylinder volume in cubic meters (m<sup>3</sup>).</p><p><a href=\"https://gavinw.me/posts/javascript/select-units.html\">Continue reading...</a></p>"
        },
        {
            "id": "https://gavinw.me/posts/javascript/modules.html",
            "url": "https://gavinw.me/posts/javascript/modules.html",
            "title": "JavaScript Modules",
            "date_published": "2023-02-27T00:00:00Z",
            "content_html": "<p>A module is a single JavaScript file where its variables and functions can be accessed from other JavaScript files. A local web server must be used to test modules in the browser; otherwise, opening the web page locally will not work.</p><p><a href=\"https://gavinw.me/posts/javascript/modules.html\">Continue reading...</a></p>"
        },
        {
            "id": "https://gavinw.me/posts/python/numpy-index-max.html",
            "url": "https://gavinw.me/posts/python/numpy-index-max.html",
            "title": "Index of Max Value with NumPy",
            "date_published": "2023-02-06T00:00:00Z",
            "content_html": "<p>Use NumPy's <code>argmax()</code> function to get the index of the maximum value in an array.</p><p><a href=\"https://gavinw.me/posts/python/numpy-index-max.html\">Continue reading...</a></p>"
        },
        {
            "id": "https://gavinw.me/posts/python/tkinter-label.html",
            "url": "https://gavinw.me/posts/python/tkinter-label.html",
            "title": "Update Label Text in Tkinter",
            "date_published": "2023-02-04T00:00:00Z",
            "content_html": "<p>Example of updating a Label's text in Tkinter.</p><p><a href=\"https://gavinw.me/posts/python/tkinter-label.html\">Continue reading...</a></p>"
        },
        {
            "id": "https://gavinw.me/posts/python/tkinter-customtkinter.html",
            "url": "https://gavinw.me/posts/python/tkinter-customtkinter.html",
            "title": "Tkinter with the CustomTkinter Theme",
            "date_published": "2023-02-04T00:00:00Z",
            "content_html": "<p>Example of a Tkinter app using the customtkinter theme. This theme will automatically change to light or dark mode when the macOS appearance changes. More information about the theme is available on GitHub at <a href=\"https://github.com/TomSchimansky/CustomTkinter\">TomSchimansky/CustomTkinter</a>.</p><p><a href=\"https://gavinw.me/posts/python/tkinter-customtkinter.html\">Continue reading...</a></p>"
        },
        {
            "id": "https://gavinw.me/posts/python/tkinter-open-json-file.html",
            "url": "https://gavinw.me/posts/python/tkinter-open-json-file.html",
            "title": "Open JSON File in Tkinter",
            "date_published": "2023-02-04T00:00:00Z",
            "content_html": "<p>Example of opening a JSON file and reading its contents in a Tkinter app. See\nthe <a href=\"https://docs.python.org/3/library/dialog.html\">Python Tkinter docs</a> for\nmore information about file selection dialogs.</p><p><a href=\"https://gavinw.me/posts/python/tkinter-open-json-file.html\">Continue reading...</a></p>"
        },
        {
            "id": "https://gavinw.me/posts/python/flask-bokeh-graph.html",
            "url": "https://gavinw.me/posts/python/flask-bokeh-graph.html",
            "title": "Bokeh Graphs and Htmx with Flask",
            "date_published": "2023-02-04T00:00:00Z",
            "content_html": "<p><a href=\"https://bokeh.org\">Bokeh</a> is a visualization library for Python that makes it easy to plot data in Jupyter notebooks or web pages. <a href=\"https://htmx.org\">Htmx</a> allows you to develop dynamic, interactive web pages without complex JavaScript. The examples in the following sections demonstrate using Flask with Bokeh graphs and Htmx interactivity.</p><p><a href=\"https://gavinw.me/posts/python/flask-bokeh-graph.html\">Continue reading...</a></p>"
        },
        {
            "id": "https://gavinw.me/posts/python/matplotlib-contour-smoothing.html",
            "url": "https://gavinw.me/posts/python/matplotlib-contour-smoothing.html",
            "title": "Contour Plot Smoothing with Matplotlib",
            "date_published": "2023-02-04T00:00:00Z",
            "content_html": "<p>The example below generates a contour plot of sparse data.</p><p><a href=\"https://gavinw.me/posts/python/matplotlib-contour-smoothing.html\">Continue reading...</a></p>"
        },
        {
            "id": "https://gavinw.me/posts/python/flask-plotly-graph.html",
            "url": "https://gavinw.me/posts/python/flask-plotly-graph.html",
            "title": "Plotly Graphs and Htmx with Flask",
            "date_published": "2023-02-04T00:00:00Z",
            "content_html": "<p><a href=\"https://plotly.com\">Plotly</a> is a great graphing library for scientific applications. <a href=\"https://htmx.org\">Htmx</a> allows you to develop dynamic, interactive web pages without complex JavaScript. The following sections demonstrate a Plotly graph and Htmx with Flask.</p><p><a href=\"https://gavinw.me/posts/python/flask-plotly-graph.html\">Continue reading...</a></p>"
        },
        {
            "id": "https://gavinw.me/posts/python/numpy-large-array-memory.html",
            "url": "https://gavinw.me/posts/python/numpy-large-array-memory.html",
            "title": "Memory Usage of a Large NumPy Array",
            "date_published": "2023-02-04T00:00:00Z",
            "content_html": "<p>In the examples below, a 500x2000x2000 three-dimensional NumPy array named <code>a</code> is initialized with zeros. At each iteration, a random two-dimensional array <code>r</code> is inserted into array <code>a</code>. This approach could represent a larger piece of code where the <code>r</code> array would be created from various calculations during each iteration of the for-loop. Consequently, each slice in the z dimension of the <code>a</code> array is calculated at each iteration.</p><p><a href=\"https://gavinw.me/posts/python/numpy-large-array-memory.html\">Continue reading...</a></p>"
        },
        {
            "id": "https://gavinw.me/posts/python/tkinter-ttkbootstrap.html",
            "url": "https://gavinw.me/posts/python/tkinter-ttkbootstrap.html",
            "title": "Tkinter Theme with ttkbootstrap",
            "date_published": "2023-02-04T00:00:00Z",
            "content_html": "<p>Example of a Tkinter app using the ttkbootstrap theme. More information about\nthe theme is available on GitHub at <a href=\"https://github.com/israel-dryer/ttkbootstrap\">israel-dryer/ttkbootstrap</a>.</p><p><a href=\"https://gavinw.me/posts/python/tkinter-ttkbootstrap.html\">Continue reading...</a></p>"
        },
        {
            "id": "https://gavinw.me/posts/python/flask-form-input.html",
            "url": "https://gavinw.me/posts/python/flask-form-input.html",
            "title": "Form Input with Htmx and Flask",
            "date_published": "2023-02-04T00:00:00Z",
            "content_html": "<p>An HTML form collects user input on a web page. Using Flask, the input can be evaluated in Python and used elsewhere in the web application. The examples in the following sections demonstrate a basic form with Flask and using Htmx for interactivity.</p><p><a href=\"https://gavinw.me/posts/python/flask-form-input.html\">Continue reading...</a></p>"
        },
        {
            "id": "https://gavinw.me/posts/python/tkinter-basic-app.html",
            "url": "https://gavinw.me/posts/python/tkinter-basic-app.html",
            "title": "Tkinter Application",
            "date_published": "2023-02-04T00:00:00Z",
            "content_html": "<p>This example demonstrates the structure of a basic Tkinter application.</p><p><a href=\"https://gavinw.me/posts/python/tkinter-basic-app.html\">Continue reading...</a></p>"
        },
        {
            "id": "https://gavinw.me/posts/python/flask-ajax.html",
            "url": "https://gavinw.me/posts/python/flask-ajax.html",
            "title": "Update a Webpage with Ajax and Flask",
            "date_published": "2023-02-04T00:00:00Z",
            "content_html": "<p>This Flask webapp example uses Ajax to update the page with results from the post request. The results are returned as JSON which is used to update the div tags.</p><p><a href=\"https://gavinw.me/posts/python/flask-ajax.html\">Continue reading...</a></p>"
        },
        {
            "id": "https://gavinw.me/posts/python/matplotlib-animation.html",
            "url": "https://gavinw.me/posts/python/matplotlib-animation.html",
            "title": "Animation with Matplotlib",
            "date_published": "2023-02-04T00:00:00Z",
            "content_html": "<p>Matplotlib provides two animation classes for animating a plot figure. The example below uses the ArtistAnimation class. The animation can be displayed just like any other Matplotlib figure and saved to file as various video formats.</p><p><a href=\"https://gavinw.me/posts/python/matplotlib-animation.html\">Continue reading...</a></p>"
        },
        {
            "id": "https://gavinw.me/posts/python/flask-plotly-restyle.html",
            "url": "https://gavinw.me/posts/python/flask-plotly-restyle.html",
            "title": "Plotly Graph Restyle with Flask",
            "date_published": "2023-02-04T00:00:00Z",
            "content_html": "<p><a href=\"https://plotly.com\">Plotly</a> is a great graphing library for scientific applications. The example below demonstrates using the Plotly JavaScript library in a Flask app. When the page first loads, a default line graph is shown. New data points are added to the graph using the form inputs. The <code>Plotly.restyle</code> function is used to redraw the graph when new data points are submitted; this approach avoids recreating an entirely new Plotly graph each time the data is updated.</p><p><a href=\"https://gavinw.me/posts/python/flask-plotly-restyle.html\">Continue reading...</a></p>"
        },
        {
            "id": "https://gavinw.me/posts/python/tkinter-matplotlib.html",
            "url": "https://gavinw.me/posts/python/tkinter-matplotlib.html",
            "title": "View Data with Matplotlib in Tkinter",
            "date_published": "2023-02-04T00:00:00Z",
            "content_html": "<p>Below is an example of using Matplotlib to plot data in a Tkinter app. The plot figure is shown in a separate window when the button is pressed.</p><p><a href=\"https://gavinw.me/posts/python/tkinter-matplotlib.html\">Continue reading...</a></p>"
        },
        {
            "id": "https://gavinw.me/posts/python/matplotlib-mosaic-grid.html",
            "url": "https://gavinw.me/posts/python/matplotlib-mosaic-grid.html",
            "title": "Mosaic Grid of Plots with Matplotlib",
            "date_published": "2023-02-04T00:00:00Z",
            "content_html": "<p>Example of using Matplotlib <code>subplot_mosaic()</code> to create a grid of plots.</p><p><a href=\"https://gavinw.me/posts/python/matplotlib-mosaic-grid.html\">Continue reading...</a></p>"
        },
        {
            "id": "https://gavinw.me/posts/python/sorted-list.html",
            "url": "https://gavinw.me/posts/python/sorted-list.html",
            "title": "Sorted List of Items with Python",
            "date_published": "2023-02-04T00:00:00Z",
            "content_html": "<p>A list of dictionaries can be sorted using the keys in the dictionaries, while a list of tuples can be sorted using the tuple's index.</p><p><a href=\"https://gavinw.me/posts/python/sorted-list.html\">Continue reading...</a></p>"
        },
        {
            "id": "https://gavinw.me/posts/rust/enums.html",
            "url": "https://gavinw.me/posts/rust/enums.html",
            "title": "Enums in Rust",
            "date_published": "2023-01-30T00:00:00Z",
            "content_html": "<p>An enum (or enumeration) represents data that is one of several possible variants. Each variant in the enum can optionally have data associated with it. An enumeration is declared using the <code>enum</code> keyword.</p><p><a href=\"https://gavinw.me/posts/rust/enums.html\">Continue reading...</a></p>"
        },
        {
            "id": "https://gavinw.me/posts/rust/hashmaps.html",
            "url": "https://gavinw.me/posts/rust/hashmaps.html",
            "title": "Hash Maps in Rust",
            "date_published": "2022-12-18T00:00:00Z",
            "content_html": "<p>A hash map stores a key/value pair into memory. This is similar to a hash table or dictionary in other programming languages. The example below creates a new hash map, adds elements to it, then gets a value associated with a key.</p><p><a href=\"https://gavinw.me/posts/rust/hashmaps.html\">Continue reading...</a></p>"
        },
        {
            "id": "https://gavinw.me/posts/rust/strings.html",
            "url": "https://gavinw.me/posts/rust/strings.html",
            "title": "Strings in Rust",
            "date_published": "2022-12-18T00:00:00Z",
            "content_html": "<p>A string literal uses double quotes <code>\" \"</code> and represents a string slice <code>str</code> or <code>&amp;str</code>.</p><p><a href=\"https://gavinw.me/posts/rust/strings.html\">Continue reading...</a></p>"
        },
        {
            "id": "https://gavinw.me/posts/cpp/strings.html",
            "url": "https://gavinw.me/posts/cpp/strings.html",
            "title": "Strings in C++",
            "date_published": "2022-12-13T00:00:00Z",
            "content_html": "<p>Examples of working with strings are given below.</p><p><a href=\"https://gavinw.me/posts/cpp/strings.html\">Continue reading...</a></p>"
        },
        {
            "id": "https://gavinw.me/posts/cpp/clang-macos.html",
            "url": "https://gavinw.me/posts/cpp/clang-macos.html",
            "title": "Clang on macOS",
            "date_published": "2022-12-13T00:00:00Z",
            "content_html": "<p>Check if the clang compiler is installed on your Mac using the following terminal command:</p><p><a href=\"https://gavinw.me/posts/cpp/clang-macos.html\">Continue reading...</a></p>"
        },
        {
            "id": "https://gavinw.me/posts/cpp/helloworld.html",
            "url": "https://gavinw.me/posts/cpp/helloworld.html",
            "title": "Hello World in C++",
            "date_published": "2022-12-13T00:00:00Z",
            "content_html": "<p>Here is a simple example of a C++ program in a file named <code>helloworld.cpp</code>.</p><p><a href=\"https://gavinw.me/posts/cpp/helloworld.html\">Continue reading...</a></p>"
        },
        {
            "id": "https://gavinw.me/posts/cpp/cmake-install.html",
            "url": "https://gavinw.me/posts/cpp/cmake-install.html",
            "title": "Use CMake to Build and Install a C++ Project",
            "date_published": "2022-12-13T00:00:00Z",
            "content_html": "<p>Below is an example C++ project. The CMakeLists file contains instructions for building and installing the project using the CMake command line tool.</p><p><a href=\"https://gavinw.me/posts/cpp/cmake-install.html\">Continue reading...</a></p>"
        },
        {
            "id": "https://gavinw.me/posts/cpp/cmake-build.html",
            "url": "https://gavinw.me/posts/cpp/cmake-build.html",
            "title": "Use CMake to Build a C++ Project",
            "date_published": "2022-12-13T00:00:00Z",
            "content_html": "<p>Below is an example C++ project. The CMakeLists file contains instructions for building the project using the CMake command line tool.</p><p><a href=\"https://gavinw.me/posts/cpp/cmake-build.html\">Continue reading...</a></p>"
        },
        {
            "id": "https://gavinw.me/posts/cpp/numbers.html",
            "url": "https://gavinw.me/posts/cpp/numbers.html",
            "title": "Numbers in C++",
            "date_published": "2022-12-13T00:00:00Z",
            "content_html": "<p>Examples of integer, float, and double numbers are given below. An integer is just a whole number (no decimals). A float is a number with up to 7 decimal digits and a double is up to 15 decimal digits of precision.</p><p><a href=\"https://gavinw.me/posts/cpp/numbers.html\">Continue reading...</a></p>"
        },
        {
            "id": "https://gavinw.me/posts/cpp/commandline.html",
            "url": "https://gavinw.me/posts/cpp/commandline.html",
            "title": "Command Line Arguments in C++",
            "date_published": "2022-12-13T00:00:00Z",
            "content_html": "<p>To pass command line arguments to a program, define <code>main()</code> with two arguments. The <code>argc</code> argument is the number of command line arguments including the program name while <code>argv</code> is the list of arguments passed to the program.</p><p><a href=\"https://gavinw.me/posts/cpp/commandline.html\">Continue reading...</a></p>"
        },
        {
            "id": "https://gavinw.me/posts/rust/fizzbuzz.html",
            "url": "https://gavinw.me/posts/rust/fizzbuzz.html",
            "title": "FizzBuzz in Rust",
            "date_published": "2022-12-11T00:00:00Z",
            "content_html": "<p>Examples of the classic fizzbuzz problem are implemented below. The first example uses if-else statements while the second example uses pattern matching.</p><p><a href=\"https://gavinw.me/posts/rust/fizzbuzz.html\">Continue reading...</a></p>"
        },
        {
            "id": "https://gavinw.me/posts/python/dictionaries.html",
            "url": "https://gavinw.me/posts/python/dictionaries.html",
            "title": "Dictionaries in Python",
            "date_published": "2022-11-15T00:00:00Z",
            "content_html": "<p>A dictionary can be created with comma-separated key:value pairs within braces or by using the dict type constructor. A value is accessed by specifying its key in square brackets. The order of items in a dictionary is guaranteed as of Python 3.7.</p><p><a href=\"https://gavinw.me/posts/python/dictionaries.html\">Continue reading...</a></p>"
        },
        {
            "id": "https://gavinw.me/posts/rust/arrays-vectors.html",
            "url": "https://gavinw.me/posts/rust/arrays-vectors.html",
            "title": "Arrays and Vectors in Rust",
            "date_published": "2022-11-14T00:00:00Z",
            "content_html": "<p>In Rust, arrays and vectors are both collections that store multiple elements of the same type. Arrays are fixed-size collections allocated on the stack. Vectors are dynamic arrays allocated on the heap that can grow and shrink at runtime.</p><p><a href=\"https://gavinw.me/posts/rust/arrays-vectors.html\">Continue reading...</a></p>"
        },
        {
            "id": "https://gavinw.me/posts/rust/structs.html",
            "url": "https://gavinw.me/posts/rust/structs.html",
            "title": "Structs in Rust",
            "date_published": "2022-11-14T00:00:00Z",
            "content_html": "<p>A <code>struct</code> is a custom data type that contains related values. Below are some examples of creating structs and accessing its values.</p><p><a href=\"https://gavinw.me/posts/rust/structs.html\">Continue reading...</a></p>"
        },
        {
            "id": "https://gavinw.me/posts/rust/loops.html",
            "url": "https://gavinw.me/posts/rust/loops.html",
            "title": "Rust Loops",
            "date_published": "2022-11-14T00:00:00Z",
            "content_html": "<p>Rust provides three kinds of loops: <code>loop</code>, <code>while</code>, and <code>for</code>. Use the <code>loop</code> keyword to execute code repeatedly until <code>break</code> is called.</p><p><a href=\"https://gavinw.me/posts/rust/loops.html\">Continue reading...</a></p>"
        },
        {
            "id": "https://gavinw.me/posts/rust/slices.html",
            "url": "https://gavinw.me/posts/rust/slices.html",
            "title": "Slices in Rust",
            "date_published": "2022-11-14T00:00:00Z",
            "content_html": "<p>A slice is a reference to a sequence of elements in a collection such as a string or array. In this example, the <code>s</code> string is sliced to obtain a reference of the first word and second word in the string.</p><p><a href=\"https://gavinw.me/posts/rust/slices.html\">Continue reading...</a></p>"
        },
        {
            "id": "https://gavinw.me/posts/rust/tuples.html",
            "url": "https://gavinw.me/posts/rust/tuples.html",
            "title": "Tuples in Rust",
            "date_published": "2022-11-14T00:00:00Z",
            "content_html": "<p>A tuple groups together values where each value can have a different type. Tuples have a fixed length and the first index is 0. In this example, a tuple is defined with three values of different types. The value is accessed using a period.</p><p><a href=\"https://gavinw.me/posts/rust/tuples.html\">Continue reading...</a></p>"
        },
        {
            "id": "https://gavinw.me/posts/rust/references.html",
            "url": "https://gavinw.me/posts/rust/references.html",
            "title": "Rust References",
            "date_published": "2022-11-14T00:00:00Z",
            "content_html": "<p>A reference is denoted by an ampersand <code>&amp;</code>. In the example below, a reference of the string <code>s1</code> is passed to the <code>calculate_length</code> function. The <code>&amp;s1</code> refers to the value of <code>s1</code> without owning it.</p><p><a href=\"https://gavinw.me/posts/rust/references.html\">Continue reading...</a></p>"
        },
        {
            "id": "https://gavinw.me/posts/rust/run-file.html",
            "url": "https://gavinw.me/posts/rust/run-file.html",
            "title": "Compile and Run a Rust File",
            "date_published": "2022-11-14T00:00:00Z",
            "content_html": "<p>Below is the contents of a simple Rust program contained in a file named <code>sayhello.rs</code>.</p><p><a href=\"https://gavinw.me/posts/rust/run-file.html\">Continue reading...</a></p>"
        },
        {
            "id": "https://gavinw.me/posts/rust/functions.html",
            "url": "https://gavinw.me/posts/rust/functions.html",
            "title": "Rust Functions",
            "date_published": "2022-11-14T00:00:00Z",
            "content_html": "<p>Functions in Rust are defined with <code>fn</code>. The function name and its input arguments should be lowercase with underscores to separate words. Some examples of functions are shown below.</p><p><a href=\"https://gavinw.me/posts/rust/functions.html\">Continue reading...</a></p>"
        },
        {
            "id": "https://gavinw.me/posts/rust/ifexpressions.html",
            "url": "https://gavinw.me/posts/rust/ifexpressions.html",
            "title": "If Expressions in Rust",
            "date_published": "2022-11-14T00:00:00Z",
            "content_html": "<p>Use an <code>if</code> expression to check if a condition is met or not met. The <code>else</code> expression is used to check for multiple conditions.</p><p><a href=\"https://gavinw.me/posts/rust/ifexpressions.html\">Continue reading...</a></p>"
        },
        {
            "id": "https://gavinw.me/posts/rust/numbers.html",
            "url": "https://gavinw.me/posts/rust/numbers.html",
            "title": "Numbers in Rust",
            "date_published": "2022-11-14T00:00:00Z",
            "content_html": "<p>Signed integer types are <code>i8</code> (8-bit), <code>i16</code> (16-bit), <code>i32</code> (32-bit), <code>i64</code> (64-bit), and <code>i128</code> (128-bit). The default integer type is i32. Numbers represented by signed integers can have a positive or negative value.</p><p><a href=\"https://gavinw.me/posts/rust/numbers.html\">Continue reading...</a></p>"
        },
        {
            "id": "https://gavinw.me/posts/python/strings.html",
            "url": "https://gavinw.me/posts/python/strings.html",
            "title": "Strings in Python",
            "date_published": "2022-11-11T00:00:00Z",
            "content_html": "<p>Some basic examples of creating strings in Python.</p><p><a href=\"https://gavinw.me/posts/python/strings.html\">Continue reading...</a></p>"
        },
        {
            "id": "https://gavinw.me/posts/python/ray-functions.html",
            "url": "https://gavinw.me/posts/python/ray-functions.html",
            "title": "Ray Functions",
            "date_published": "2022-11-08T00:00:00Z",
            "content_html": "<p>To parallelize a function with the <a href=\"https://www.ray.io\">Ray</a> framework, decorate the function with <code>@ray.remote</code> to run the function remotely. Call the function with <code>.remote()</code> instead of calling it normally. The remote call yields a future that must be fetched with <code>ray.get</code>. The example below compares a parallel Ray function to a standard non-parallel function. A computationally expensive task is simulated by using the <code>sleep()</code> function.</p><p><a href=\"https://gavinw.me/posts/python/ray-functions.html\">Continue reading...</a></p>"
        },
        {
            "id": "https://gavinw.me/posts/python/secrets.html",
            "url": "https://gavinw.me/posts/python/secrets.html",
            "title": "Secrets in Python",
            "date_published": "2022-11-08T00:00:00Z",
            "content_html": "<p>Use the <code>secrets</code> module to generate cryptographically strong random passwords containing letters, numbers, and punctuation.</p><p><a href=\"https://gavinw.me/posts/python/secrets.html\">Continue reading...</a></p>"
        },
        {
            "id": "https://gavinw.me/posts/python/ray-actors.html",
            "url": "https://gavinw.me/posts/python/ray-actors.html",
            "title": "Ray Actors",
            "date_published": "2022-11-08T00:00:00Z",
            "content_html": "<p><a href=\"https://www.ray.io\">Ray</a> actors are used to parallelize a class instance to perform stateful operations in parallel. Ray will start a remote instance of the class and then execute remote method calls and maintain its own internal state. The example below compares a parallel Ray actor approach to a standard class approach. A computationally expensive task is simulated by using the <code>sleep()</code> function.</p><p><a href=\"https://gavinw.me/posts/python/ray-actors.html\">Continue reading...</a></p>"
        },
        {
            "id": "https://gavinw.me/posts/python/counter.html",
            "url": "https://gavinw.me/posts/python/counter.html",
            "title": "Counter in Python",
            "date_published": "2022-11-08T00:00:00Z",
            "content_html": "<p>The <code>Counter</code> class counts the number of times an item appears in a list or hashable object. For example, you can count the number of times a string appears in a list or how often a letter occurs in a string.</p><p><a href=\"https://gavinw.me/posts/python/counter.html\">Continue reading...</a></p>"
        },
        {
            "id": "https://gavinw.me/posts/python/unittest-csv.html",
            "url": "https://gavinw.me/posts/python/unittest-csv.html",
            "title": "Unittest CSV Files with Python",
            "date_published": "2022-11-08T00:00:00Z",
            "content_html": "<p>The example below demonstrates a unit test for a function that writes data in a dictionary to CSV files.</p><p><a href=\"https://gavinw.me/posts/python/unittest-csv.html\">Continue reading...</a></p>"
        },
        {
            "id": "https://gavinw.me/posts/python/json.html",
            "url": "https://gavinw.me/posts/python/json.html",
            "title": "JSON with Python",
            "date_published": "2022-11-08T00:00:00Z",
            "content_html": "<p>JavaScript Object Notation (JSON) is a common data format that is supported natively in Python. The format is built on name/value pairs and ordered list values. Visit <a href=\"https://www.json.org/json-en.html\">json.org</a> to learn more about the JSON format.</p><p><a href=\"https://gavinw.me/posts/python/json.html\">Continue reading...</a></p>"
        },
        {
            "id": "https://gavinw.me/posts/python/prealloc-list.html",
            "url": "https://gavinw.me/posts/python/prealloc-list.html",
            "title": "Pre-allocate a Python List",
            "date_published": "2022-11-08T00:00:00Z",
            "content_html": "<p>If the size of a list is known, then pre-allocating the list can provide performance improvements; especially for a large list. The example below measures the performance of appending items to an empty list. Pre-allocating a list of known size and assigning items to it gives better performance than appending to the list. The list comprehension approach (see Example 3) gives the best elapsed time.</p><p><a href=\"https://gavinw.me/posts/python/prealloc-list.html\">Continue reading...</a></p>"
        },
        {
            "id": "https://gavinw.me/posts/python/dask-arrays.html",
            "url": "https://gavinw.me/posts/python/dask-arrays.html",
            "title": "Dask Arrays",
            "date_published": "2022-11-08T00:00:00Z",
            "content_html": "<p>Dask Array is similar to a NumPy array and allows cutting up a large array into smaller arrays (chunks). This enables working with arrays that are larger than memory. Computations can be applied in parallel for fast execution. Below is an example of using Dask array <code>map_blocks()</code> to map a function that returns a single value. Using an 8 CPU core MacBook Pro running macOS v11.6, the serial elapsed time is 513.51 seconds and the Dask elapsed time is 3.21 seconds.</p><p><a href=\"https://gavinw.me/posts/python/dask-arrays.html\">Continue reading...</a></p>"
        },
        {
            "id": "https://gavinw.me/posts/python/tuples.html",
            "url": "https://gavinw.me/posts/python/tuples.html",
            "title": "Tuples in Python",
            "date_published": "2022-11-08T00:00:00Z",
            "content_html": "<p>A tuple is a number of items separated by commas.</p><p><a href=\"https://gavinw.me/posts/python/tuples.html\">Continue reading...</a></p>"
        },
        {
            "id": "https://gavinw.me/posts/python/cprofile.html",
            "url": "https://gavinw.me/posts/python/cprofile.html",
            "title": "cProfile for Python Code",
            "date_published": "2022-11-08T00:00:00Z",
            "content_html": "<p>The <code>cProfile</code> module provides an interface to profile Python programs. A single function or an entire script or module can be profiled. As an example, the script shown below contains two functions that suspend execution for 2 and 4.5 seconds.</p><p><a href=\"https://gavinw.me/posts/python/cprofile.html\">Continue reading...</a></p>"
        },
        {
            "id": "https://gavinw.me/posts/python/lists.html",
            "url": "https://gavinw.me/posts/python/lists.html",
            "title": "Lists in Python",
            "date_published": "2022-11-08T00:00:00Z",
            "content_html": "<p>A list is used to group numbers, strings, or objects together. It is written as a pair of square brackets containing comma-separated items. A list typically contains items of similar type but it can contain items of different types too. Unlike tuples, lists are mutable therefore the content of a list can be modified.</p><p><a href=\"https://gavinw.me/posts/python/lists.html\">Continue reading...</a></p>"
        },
        {
            "id": "https://gavinw.me/posts/python/test-examples.html",
            "url": "https://gavinw.me/posts/python/test-examples.html",
            "title": "Test Examples with Python",
            "date_published": "2022-11-08T00:00:00Z",
            "content_html": "<p>Example scripts are often available for Python packages to demonstrate how to use the package. The examples are typically part of the repository where the package is developed. Tests should be written to ensure the examples continue to work with new versions of the package.</p><p><a href=\"https://gavinw.me/posts/python/test-examples.html\">Continue reading...</a></p>"
        },
        {
            "id": "https://gavinw.me/posts/python/dask-script.html",
            "url": "https://gavinw.me/posts/python/dask-script.html",
            "title": "Run Dask Code as a Script",
            "date_published": "2022-11-08T00:00:00Z",
            "content_html": "<p>Since most Dask examples are demonstrated using Jupyter notebooks, here's an example of using Dask in a Python file or script. Notice how the Dask code must be in the <code>__main__</code> block or called from within a function.</p><p><a href=\"https://gavinw.me/posts/python/dask-script.html\">Continue reading...</a></p>"
        },
        {
            "id": "https://gavinw.me/posts/python/xml.html",
            "url": "https://gavinw.me/posts/python/xml.html",
            "title": "Parsing XML with Python",
            "date_published": "2022-11-08T00:00:00Z",
            "content_html": "<p>There are several XML parsers available in the Python standard library. Below is an example of using the ElementTree module.</p><p><a href=\"https://gavinw.me/posts/python/xml.html\">Continue reading...</a></p>"
        },
        {
            "id": "https://gavinw.me/posts/python/scipy-sparse-diag.html",
            "url": "https://gavinw.me/posts/python/scipy-sparse-diag.html",
            "title": "Sparse Diagonal Matrix with SciPy",
            "date_published": "2022-11-08T00:00:00Z",
            "content_html": "<p>The <code>diags</code> function from SciPy can be used to create a sparse diagonal matrix. The matrix is constructed from lists or NumPy arrays that represent the diagonals of the matrix. The <code>offsets</code> argument sets the placement of the diagonals within the matrix where <code>k = 0</code> is the main diagonal, <code>k &lt; 0</code> is the kth lower diagonal, and <code>k &gt; 0</code> is the kth upper diagonal.</p><p><a href=\"https://gavinw.me/posts/python/scipy-sparse-diag.html\">Continue reading...</a></p>"
        },
        {
            "id": "https://gavinw.me/posts/python/numpy-loop-columns.html",
            "url": "https://gavinw.me/posts/python/numpy-loop-columns.html",
            "title": "Loop Over Columns with NumPy",
            "date_published": "2022-11-07T00:00:00Z",
            "content_html": "<p>Loop over columns in an array by iterating over the transpose of the array.</p><p><a href=\"https://gavinw.me/posts/python/numpy-loop-columns.html\">Continue reading...</a></p>"
        },
        {
            "id": "https://gavinw.me/posts/python/numpy-save-load-arrays.html",
            "url": "https://gavinw.me/posts/python/numpy-save-load-arrays.html",
            "title": "Save and Load NumPy Arrays",
            "date_published": "2022-11-07T00:00:00Z",
            "content_html": "<p>NumPy arrays can be saved and loaded using different file formats. Examples of using the NumPy file formats <code>.npy</code> and <code>.npz</code> as well as a plain text format are given below.</p><p><a href=\"https://gavinw.me/posts/python/numpy-save-load-arrays.html\">Continue reading...</a></p>"
        },
        {
            "id": "https://gavinw.me/posts/python/numpy-difference.html",
            "url": "https://gavinw.me/posts/python/numpy-difference.html",
            "title": "Set Difference of Two NumPy Arrays",
            "date_published": "2022-11-07T00:00:00Z",
            "content_html": "<p>The <code>setdiff1d</code> function returns the unique values in array 1 that are not in array 2.</p><p><a href=\"https://gavinw.me/posts/python/numpy-difference.html\">Continue reading...</a></p>"
        },
        {
            "id": "https://gavinw.me/posts/python/numpy-maximum-array.html",
            "url": "https://gavinw.me/posts/python/numpy-maximum-array.html",
            "title": "Maximum Array with NumPy",
            "date_published": "2022-11-07T00:00:00Z",
            "content_html": "<p>The <code>maximum</code> function returns a new array that contains the maximum values of the two given arrays.</p><p><a href=\"https://gavinw.me/posts/python/numpy-maximum-array.html\">Continue reading...</a></p>"
        },
        {
            "id": "https://gavinw.me/posts/python/numpy-full-array.html",
            "url": "https://gavinw.me/posts/python/numpy-full-array.html",
            "title": "Full Array in NumPy",
            "date_published": "2022-11-07T00:00:00Z",
            "content_html": "<p>Use the <code>full</code> function in NumPy to create a new array filled with a given value.</p><p><a href=\"https://gavinw.me/posts/python/numpy-full-array.html\">Continue reading...</a></p>"
        },
        {
            "id": "https://gavinw.me/posts/python/numpy-compare-inv-solve.html",
            "url": "https://gavinw.me/posts/python/numpy-compare-inv-solve.html",
            "title": "Compare inv and solve Functions in NumPy",
            "date_published": "2022-11-07T00:00:00Z",
            "content_html": "<p>Solve equation <code>A*x=b</code> for <code>x</code> and compare results using the <code>np.linalg.solve()</code> function to the <code>np.linalg.inv()</code> approach.</p><p><a href=\"https://gavinw.me/posts/python/numpy-compare-inv-solve.html\">Continue reading...</a></p>"
        },
        {
            "id": "https://gavinw.me/posts/python/numpy-clip-array.html",
            "url": "https://gavinw.me/posts/python/numpy-clip-array.html",
            "title": "Clip Array Values with NumPy",
            "date_published": "2022-11-07T00:00:00Z",
            "content_html": "<p>The <code>clip</code> function limits the values in an array based on a given interval or minimum or maximum value.</p><p><a href=\"https://gavinw.me/posts/python/numpy-clip-array.html\">Continue reading...</a></p>"
        },
        {
            "id": "https://gavinw.me/posts/python/numpy-bool-index.html",
            "url": "https://gavinw.me/posts/python/numpy-bool-index.html",
            "title": "Boolean Indexing with NumPy",
            "date_published": "2022-11-07T00:00:00Z",
            "content_html": "<p>Use boolean indexing in NumPy arrays to assign values. The example below assigns a zero to array items that are less than zero.</p><p><a href=\"https://gavinw.me/posts/python/numpy-bool-index.html\">Continue reading...</a></p>"
        },
        {
            "id": "https://gavinw.me/posts/julia/testing.html",
            "url": "https://gavinw.me/posts/julia/testing.html",
            "title": "Testing Julia Code",
            "date_published": "2021-06-26T00:00:00Z",
            "content_html": "<p>To demonstrate testing functions in Julia, two functions are defined below. A small program that uses the functions is also shown.</p><p><a href=\"https://gavinw.me/posts/julia/testing.html\">Continue reading...</a></p>"
        },
        {
            "id": "https://gavinw.me/posts/julia/docstrings.html",
            "url": "https://gavinw.me/posts/julia/docstrings.html",
            "title": "Docstrings in Julia Code",
            "date_published": "2021-06-24T00:00:00Z",
            "content_html": "<p>Any string appearing directly above an object is interpreted as a docstring for that object. This documentation is treated as Markdown therefore code blocks and other Markdown supported features are supported. An example docstring for a function is shown below.</p><p><a href=\"https://gavinw.me/posts/julia/docstrings.html\">Continue reading...</a></p>"
        },
        {
            "id": "https://gavinw.me/posts/julia/debugging.html",
            "url": "https://gavinw.me/posts/julia/debugging.html",
            "title": "Debugging Julia Code",
            "date_published": "2021-06-22T00:00:00Z",
            "content_html": "<p>One way to debug Julia code is to use the <a href=\"https://github.com/JuliaDebug/Infiltrator.jl\">Infiltrator.jl package</a>.  As shown in the example file below, a breakpoint is set with the <code>@infiltrate</code> macro.</p><p><a href=\"https://gavinw.me/posts/julia/debugging.html\">Continue reading...</a></p>"
        },
        {
            "id": "https://gavinw.me/posts/julia/arrays.html",
            "url": "https://gavinw.me/posts/julia/arrays.html",
            "title": "Arrays in Julia",
            "date_published": "2021-06-20T00:00:00Z",
            "content_html": "<p>An array is a collection of items surrounded by square brackets <code>[ ]</code>. Arrays in Julia are 1-based therefore the first item in an array is at the 1-index.</p><p><a href=\"https://gavinw.me/posts/julia/arrays.html\">Continue reading...</a></p>"
        },
        {
            "id": "https://gavinw.me/posts/julia/conditionals.html",
            "url": "https://gavinw.me/posts/julia/conditionals.html",
            "title": "Conditional Statements in Julia",
            "date_published": "2021-06-13T00:00:00Z",
            "content_html": "<p>A conditional statement is written with the <code>if-elseif-else</code> syntax. The ternary operator <code>? :</code> offers a concise syntax for a conditional expression.</p><p><a href=\"https://gavinw.me/posts/julia/conditionals.html\">Continue reading...</a></p>"
        },
        {
            "id": "https://gavinw.me/posts/julia/modules.html",
            "url": "https://gavinw.me/posts/julia/modules.html",
            "title": "Modules for Julia Code",
            "date_published": "2021-06-08T00:00:00Z",
            "content_html": "<p>Modules help organize code that can be easily used in another program. The <code>MyModule</code> shown below is an example of a user defined module which includes functions from the <code>funcA</code> and <code>funcB</code> files. For this example the module and its associated files are contained in a folder called MyModule.</p><p><a href=\"https://gavinw.me/posts/julia/modules.html\">Continue reading...</a></p>"
        },
        {
            "id": "https://gavinw.me/posts/julia/json-parsing.html",
            "url": "https://gavinw.me/posts/julia/json-parsing.html",
            "title": "JSON Parsing with Julia",
            "date_published": "2021-06-08T00:00:00Z",
            "content_html": "<p>The <a href=\"https://juliapackages.com/p/json\">JSON.jl package</a> provides JSON parsing and printing capabilities in Julia. See the package's documentation for installation and usage information. The example below parses the <code>vehicles.json</code> file which contains</p><p><a href=\"https://gavinw.me/posts/julia/json-parsing.html\">Continue reading...</a></p>"
        },
        {
            "id": "https://gavinw.me/posts/julia/functions.html",
            "url": "https://gavinw.me/posts/julia/functions.html",
            "title": "Functions in Julia",
            "date_published": "2021-05-27T00:00:00Z",
            "content_html": "<p>In Julia, a function is an object where input arguments provide a return value.</p><p><a href=\"https://gavinw.me/posts/julia/functions.html\">Continue reading...</a></p>"
        },
        {
            "id": "https://gavinw.me/posts/julia/loops.html",
            "url": "https://gavinw.me/posts/julia/loops.html",
            "title": "Loops in Julia",
            "date_published": "2021-05-25T00:00:00Z",
            "content_html": "<p>Use a for-loop for repeated tasks and to iterate over arrays.</p><p><a href=\"https://gavinw.me/posts/julia/loops.html\">Continue reading...</a></p>"
        },
        {
            "id": "https://gavinw.me/posts/julia/tuples.html",
            "url": "https://gavinw.me/posts/julia/tuples.html",
            "title": "Tuples in Julia",
            "date_published": "2021-05-23T00:00:00Z",
            "content_html": "<p>A tuple is a fixed-length immutable container represented by parentheses <code>( )</code>. Values in a tuple are accessed with indexing. A single item tuple must contain a comma.</p><p><a href=\"https://gavinw.me/posts/julia/tuples.html\">Continue reading...</a></p>"
        },
        {
            "id": "https://gavinw.me/posts/julia/dictionaries.html",
            "url": "https://gavinw.me/posts/julia/dictionaries.html",
            "title": "Dictionaries in Julia",
            "date_published": "2021-05-22T00:00:00Z",
            "content_html": "<p>The <code>Dict()</code> constructor is used to create dictionaries in Julia. A dictionary is constructed using key value pairs separated with <code>=&gt;</code> or as tuples.</p><p><a href=\"https://gavinw.me/posts/julia/dictionaries.html\">Continue reading...</a></p>"
        },
        {
            "id": "https://gavinw.me/posts/julia/strings.html",
            "url": "https://gavinw.me/posts/julia/strings.html",
            "title": "Strings in Julia",
            "date_published": "2021-05-22T00:00:00Z",
            "content_html": "<p>Strings can be represented by double quotes or by triple double quotes. A character or group of characters are extracted from a string using an index or range. Combining strings can be accomplished with <code>$</code>, <code>string</code>, and <code>*</code>.</p><p><a href=\"https://gavinw.me/posts/julia/strings.html\">Continue reading...</a></p>"
        },
        {
            "id": "https://gavinw.me/posts/python/fizzbuzz.html",
            "url": "https://gavinw.me/posts/python/fizzbuzz.html",
            "title": "Fizz Buzz in Python",
            "date_published": "2020-05-14T00:00:00Z",
            "content_html": "<p>This is the classic fizz buzz example where a number divisible by 3 is replaced with Fizz, a number divisible by 5 is replaced with Buzz, and a number divisible by both 3 and 5 (divisible by 15) is replaced with Fizz Buzz.</p><p><a href=\"https://gavinw.me/posts/python/fizzbuzz.html\">Continue reading...</a></p>"
        }
    ]
}